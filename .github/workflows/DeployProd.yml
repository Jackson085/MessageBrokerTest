name: DeployProd

on:
  push:
    branches:
      - prod
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - prod

env:
  gh_server_host_ip: ${{ vars.PROD_HOST_IP }}
  gh_server_host_username: ${{ vars.PROD_HOST_USERNAME }}
  gh_server_host_password: ${{ secrets.PROD_HOST_PASSWORD }}

  gh_app_web_port: ${{ vars.WEB_PORT }}
  gh_app_web_prefix: ${{ vars.APP_WEB_PREFIX }}
  gh_registry_token: ${{ secrets.REGISTRY_TOKEN }}
  gh_repository: ${{ github.repository }}
  gh_version: ${{ vars.APP_VERSION }}

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Test
        run: python -m Tests.StartAll

  build_frontend:
      runs-on: self-hosted
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Build Frontend
        run: |
            cd gui
            npm install
            ng build --base-href ${{ env.gh_app_web_prefix }}

      - name: Upload Frontend
        uses: actions/upload-artifact@master
        with:
          name: wwwroot
          path: ./wwwroot

  build_docker:
      runs-on: self-hosted
      needs: [test, build_frontend]
      steps:
      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.gh_registry_token }}

      - name: lowercase ENV
        run: echo "gh_repository=${gh_repository@L}" >> $GITHUB_ENV

      - name: Download Frontend
        uses: actions/download-artifact@master
        with:
          name: wwwroot
          path: ./wwwroot

      - name: Build Docker
        run: docker build -t ghcr.io/${{ env.gh_repository }}:${{ env.gh_version }} --build-arg PORT=${{ env.gh_app_web_port }} .

      - name: Push Docker
        run: docker push ghcr.io/${{ env.gh_repository }}:${{ env.gh_version }}

  PROD-deploy_docker:
    runs-on: self-hosted
    needs: build_docker
    steps:
      - name: lowercase ENV
        run: echo "gh_repository=${gh_repository@L}" >> $GITHUB_ENV

      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.gh_registry_token }}

      - name: Stop existing Docker on Port
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.gh_server_host_ip }}
          username: ${{ env.gh_server_host_username }}
          password: ${{ env.gh_server_host_password }}
          port: 22
          script: |
            container_ids=$(sudo docker ps --format '{{.ID}}' --filter "publish=${{ env.gh_app_web_port }}/tcp")
            
            if [ -z "$container_ids" ]; then
              echo "Keine Container gefunden auf Port: ${{ env.gh_app_web_port }} gefunden."
            else
              sudo docker stop $container_ids
            fi

      - name: Deploy Docker image to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.gh_server_host_ip }}
          username: ${{ env.gh_server_host_username }}
          password: ${{ env.gh_server_host_password }}
          port: 22
          script: |
            sudo docker pull ghcr.io/${{ env.gh_repository }}:${{ env.gh_version }}
            sudo docker run -p ${{ env.gh_app_web_port }}:80 -d ghcr.io/${{ env.gh_repository }}:${{ env.gh_version }}